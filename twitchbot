#!/usr/bin/env python
import sys
import re
import configparser
import argparse
import praw

from string import Template
from lib import twitchtv


def main():
    args = parse_args()
    config = load_config(args.config_file)

    stream_names = config.get('Settings', 'streams').split(",")
    stream_names = [s.strip() for s in stream_names]
    streams = twitchtv.fetch_streams(stream_names)

    output = render(args, config, streams)

    if args.print_output:
        print(output)

    if not args.dry_run and update_sidebar(config, output):
        print("Update successful!")

    print("Update successful")


def parse_args():
    parser = argparse.ArgumentParser(description="""\
Lookup the status of Twitch.TV streams and write them to a\n
subreddit\'s sidebar.""")
    parser.add_argument('config_file',
                        type=str, nargs='?',
                        default='config.conf',
                        help='the config file to read')
    parser.add_argument('--print-output', dest='print_output',
                        action='store_true',
                        help='print the rendered output')
    parser.add_argument('--dry-run', dest='dry_run',
                        action='store_true',
                        help='Just print the rendered output')
    parser.add_argument('--debug', '-d', dest='debug',
                        action='store_true',
                        help='implies --print-output and --dry-run')

    args = parser.parse_args()

    if args.debug:
        args.dry_run = True
        args.print_output = True

    return args


def load_config(file_name):
    config = configparser.ConfigParser({
        'no_streams': '',
        'streams': '',
        'header': '',
        'footer': '',
        'separator': ',&nbsp;',
        'template': '$name',
        'owner': ''
    })

    try:
        with open(file_name) as f:
            config.read_file(f)
    except IOError:
        sys.exit('Could not open \'{}\'.'.format(file_name))

    return config


def update_sidebar(config, content):
    owner = config.get('Settings', 'owner')
    r = praw.Reddit(user_agent='Twitch.TV Stream Bot /u/{}/'.format(owner))

    username = config.get('Settings', 'username')
    password = config.get('Settings', 'password')
    r.login(username, password)

    subreddit = r.get_subreddit(config.get('Settings', 'subreddit'))
    settings = subreddit.get_settings()
    sidebar = settings['description']

    # Remove text currently between the markers
    sidebar = re.sub(r'(\[\]\(#BOT_STREAMS\)).*(\[\]\(/BOT_STREAMS\))',
                     '\\1\\2',
                     sidebar,
                     flags=re.DOTALL)

    # Place new text between the markers
    opening_marker = "[](#BOT_STREAMS)"
    if content:
        try:
            marker_pos = sidebar.index(opening_marker) + len(opening_marker)
            sidebar = sidebar[:marker_pos] + content + sidebar[marker_pos:]
        except ValueError:
            # Substring not found
            logging.warning("No streams marker found.")

    subreddit.update_settings(description=sidebar)


# Given config settings a stream info, render the output to be
# displayed in the subreddit sidebar
def render(args, config, streams):
    if len(streams) > 0:
        header = decode_str(config.get('Settings', 'header'))
        footer = decode_str(config.get('Settings', 'footer'))
        separator = decode_str(config.get('Settings', 'separator'))

        template_raw = config.get('Settings', 'template')
        template = Template(decode_str(template_raw))

        renders = [template.safe_substitute(get_vals(s)) for s in streams]
        body = separator.join(renders)

        return header + body + footer
    else:
        return decode_str(config.get('Settings', 'no_streams'))


# Extract the values from a stream that may be substituted into the
# template
def get_vals(stream):
    return {
        'name': stream['channel']['display_name'],
        'viewers': stream['viewers'],
        'title': stream['channel']['status'],
        'link': stream['channel']['url'],
        'icon': stream['channel']['logo'],
        'banner': stream['channel']['banner']
    }


# Given a string, decode python escape sequences (\n, \t, ...)
def decode_str(s):
    # Slightly different in Python 3 vs 2
    if sys.version_info[0] == 3:
        return bytes(s, "utf-8").decode("unicode_escape")
    else:
        return s.decode('string_escape')


if __name__ == "__main__":
    main()
