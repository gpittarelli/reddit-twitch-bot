#!/usr/bin/env python
import sys, re, configparser, re
import praw

from string import Template
from lib import justintv

def main():
    config_file = "config.conf" if (len(sys.argv) == 1) else sys.argv[1]

    config = configparser.ConfigParser({
        'no_streams': '',
        'streams': '',
        'header': '',
        'footer': '',
        'separator': ',&nbsp;',
        'template': '$name',
        'owner': ''
    })
    try:
        with open(config_file) as f:
            config.read_file(f)
    except IOError:
        sys.exit('Could not open \'{}\'.'.format(config_file))


    stream_names = config.get('Settings', 'streams')
    streams = justintv.fetch_streams(stream_names)

    output = render(config, streams)

    owner = config.get('Settings', 'owner')
    r = praw.Reddit(user_agent='Twitch.TV Stream Bot /u/{}/'.format(owner))

    username = config.get('Settings', 'username')
    password = config.get('Settings', 'password')
    r.login(username, password)

    subreddit = r.get_subreddit(config.get('Settings', 'subreddit'))
    settings = subreddit.get_settings()
    sidebar = settings['description']

    # Remove text currently between the markers
    sidebar = re.sub(r'(\[\]\(#BOT_STREAMS\)).*(\[\]\(/BOT_STREAMS\))',
                     '\\1\\2',
                     sidebar)

    opening_marker = "[](#BOT_STREAMS)"
    if output:
        try:
            marker_pos = sidebar.index(opening_marker) + len(opening_marker)
            sidebar = sidebar[:marker_pos] + output + sidebar[marker_pos:]
        except ValueError:
            # Substring not found
            logging.warning("No streams marker found.")

    subreddit.update_settings(description=sidebar)

    print("Update successful")


# Given config settings a stream info, render the output to be
# displayed in the subreddit sidebar
def render(config, streams):
    if len(streams) > 0:
        header = config.get('Settings', 'header')
        footer = config.get('Settings', 'footer')
        separator = config.get('Settings', 'separator')

        template = Template(config.get('Settings', 'template'))
        renders = [template.safe_substitute(get_vals(s)) for s in streams]
        body = separator.join(renders)

        return header + body + footer
    else:
        return config.get('Settings', 'no_streams')

# Extract the values from a stream that may be substituted into the
# template
def get_vals(stream):
    return {
        'name': stream['channel']['login'],
        'viewers': stream['channel_count'],
        'title': stream['channel']['title'],
        'icon_tiny': stream['channel']['image_url_tiny'],
        'icon_small': stream['channel']['image_url_small'],
        'icon': stream['channel']['image_url_medium'],
        'icon_large': stream['channel']['image_url_large'],
        'icon_huge': stream['channel']['image_url_huge']
    }

if __name__ == "__main__":
    main()
